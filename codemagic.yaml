workflows:
  # ============================================
  # RECOMMENDED: Unsigned IPA for Sideloading
  # This workflow creates an unsigned IPA that can be signed later
  # Perfect for jailbroken devices or manual signing with tools like iOS App Signer
  # ============================================
  ios-unsigned-workflow:
    name: iOS Penrion (Unsigned for Sideloading)
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      vars:
        XCODE_PROJECT: "ios-app/OsuTablet/OsuTablet.xcodeproj"
        XCODE_SCHEME: "OsuTablet"
      xcode: 15.0
    scripts:
      - name: Set up build environment
        script: |
          echo "Building unsigned IPA for sideloading..."
          echo "Project: $XCODE_PROJECT"
          echo "Scheme: $XCODE_SCHEME"
      
      - name: Configure project for unsigned build
        script: |
          cd ios-app/OsuTablet
          
          # Update Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.penrion.osutablet" OsuTablet/Info.plist || true
          
          # Modify project settings to disable code signing
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' OsuTablet.xcodeproj/project.pbxproj || true
          sed -i '' 's/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = "";/g' OsuTablet.xcodeproj/project.pbxproj || true
          
          echo "✓ Project configured for unsigned build"
          
      - name: Build app for iOS device
        script: |
          cd ios-app/OsuTablet
          
          # Build for device without code signing
          xcodebuild clean build \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath build/DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="" \
            PROVISIONING_PROFILE="" \
            | xcpretty || true
          
          echo "✓ Build completed"
      
      - name: Create unsigned IPA package
        script: |
          set -e
          cd ios-app/OsuTablet

          # Try to determine .app path from build settings
          APP_DIR=$(xcodebuild \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -showBuildSettings | awk -F" = " '/TARGET_BUILD_DIR/ {print $2}' | tail -1)

          WRAPPER_NAME=$(xcodebuild \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -showBuildSettings | awk -F" = " '/WRAPPER_NAME/ {print $2}' | tail -1)

          if [ -n "$APP_DIR" ] && [ -n "$WRAPPER_NAME" ]; then
            APP_PATH="$APP_DIR/$WRAPPER_NAME"
          else
            # Fallback to find if showBuildSettings didn't return values
            APP_PATH=$(find build/DerivedData -path "*Release-iphoneos/*.app" -type d | head -1)
          fi

          echo "APP_DIR=$APP_DIR"
          echo "WRAPPER_NAME=$WRAPPER_NAME"
          echo "Resolved APP_PATH=$APP_PATH"

          if [ -z "$APP_PATH" ] || [ ! -d "$APP_PATH" ]; then
            echo "❌ Error: Could not find built .app directory"
            find build -maxdepth 4 -type d -name "*.app" | sed 's/^/Found candidate: /' || true
            exit 1
          fi

          # Prepare Payload and create IPA
          rm -rf build/Payload
          mkdir -p build/Payload
          cp -R "$APP_PATH" build/Payload/

          cd build
          zip -qry Penrion-OsuTablet-Unsigned.ipa Payload

          # Move IPA to repo release directory
          mkdir -p ../../release/ios
          mv -f Penrion-OsuTablet-Unsigned.ipa ../../release/ios/

          echo "✓ IPA created at: $(pwd)/../../release/ios/Penrion-OsuTablet-Unsigned.ipa"

      - name: Verify IPA
        script: |
          echo "PWD=$(pwd)"
          ls -la
          echo "Listing release directory:" 
          ls -la release || true
          echo "Listing release/ios directory:" 
          ls -la release/ios || true
          if [ -f "release/ios/Penrion-OsuTablet-Unsigned.ipa" ]; then
            echo "✅ Build successful!"
            ls -lh "release/ios/Penrion-OsuTablet-Unsigned.ipa"
          else
            echo "❌ IPA not found"
            exit 1
          fi
    
    artifacts:
      - release/ios/*.ipa
    
    publishing:
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true

  # ============================================
  # Alias workflow for tools referencing "ios-workflow"
  # Same as ios-unsigned-workflow, kept for compatibility
  # ============================================
  ios-workflow:
    name: iOS Penrion (Unsigned alias for compatibility)
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      vars:
        XCODE_PROJECT: "ios-app/OsuTablet/OsuTablet.xcodeproj"
        XCODE_SCHEME: "OsuTablet"
      xcode: 15.0
    scripts:
      - name: Set up build environment
        script: |
          echo "Building unsigned IPA for sideloading (ios-workflow alias)..."
          echo "Project: $XCODE_PROJECT"
          echo "Scheme: $XCODE_SCHEME"
      - name: Configure project for unsigned build
        script: |
          cd ios-app/OsuTablet
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.penrion.osutablet" OsuTablet/Info.plist || true
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' OsuTablet.xcodeproj/project.pbxproj || true
          sed -i '' 's/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = "";/g' OsuTablet.xcodeproj/project.pbxproj || true
      - name: Build app for iOS device
        script: |
          cd ios-app/OsuTablet
          xcodebuild clean build \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -derivedDataPath build/DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM="" \
            PROVISIONING_PROFILE="" \
            | xcpretty || true
      - name: Create unsigned IPA package
        script: |
          set -e
          cd ios-app/OsuTablet

          APP_DIR=$(xcodebuild \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -showBuildSettings | awk -F" = " '/TARGET_BUILD_DIR/ {print $2}' | tail -1)

          WRAPPER_NAME=$(xcodebuild \
            -project OsuTablet.xcodeproj \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -showBuildSettings | awk -F" = " '/WRAPPER_NAME/ {print $2}' | tail -1)

          if [ -n "$APP_DIR" ] && [ -n "$WRAPPER_NAME" ]; then
            APP_PATH="$APP_DIR/$WRAPPER_NAME"
          else
            APP_PATH=$(find build/DerivedData -path "*Release-iphoneos/*.app" -type d | head -1)
          fi

          echo "Resolved APP_PATH=$APP_PATH"
          if [ -z "$APP_PATH" ] || [ ! -d "$APP_PATH" ]; then
            echo "❌ Error: Could not find built .app directory"
            exit 1
          fi

          rm -rf build/Payload
          mkdir -p build/Payload
          cp -R "$APP_PATH" build/Payload/

          cd build
          zip -qry Penrion-OsuTablet-Unsigned.ipa Payload
          mkdir -p ../../release/ios
          mv -f Penrion-OsuTablet-Unsigned.ipa ../../release/ios/

      - name: Verify IPA
        script: |
          if [ -f "release/ios/Penrion-OsuTablet-Unsigned.ipa" ]; then
            echo "✅ Build successful!"
            ls -lh "release/ios/Penrion-OsuTablet-Unsigned.ipa"
          else
            echo "❌ IPA not found"
            exit 1
          fi
    artifacts:
      - release/ios/*.ipa
    publishing:
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true
